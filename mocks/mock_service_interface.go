// Code generated by MockGen. DO NOT EDIT.
// Source: module/v1/service/service_contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	models "github.com/yaya-ri/API-news/module/v1/model"
	requests "github.com/yaya-ri/API-news/module/v1/object/request"
	reflect "reflect"
)

// MockNewsServiceInterface is a mock of NewsServiceInterface interface
type MockNewsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNewsServiceInterfaceMockRecorder
}

// MockNewsServiceInterfaceMockRecorder is the mock recorder for MockNewsServiceInterface
type MockNewsServiceInterfaceMockRecorder struct {
	mock *MockNewsServiceInterface
}

// NewMockNewsServiceInterface creates a new mock instance
func NewMockNewsServiceInterface(ctrl *gomock.Controller) *MockNewsServiceInterface {
	mock := &MockNewsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNewsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewsServiceInterface) EXPECT() *MockNewsServiceInterfaceMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockNewsServiceInterface) Store(request requests.News) (models.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", request)
	ret0, _ := ret[0].(models.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockNewsServiceInterfaceMockRecorder) Store(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockNewsServiceInterface)(nil).Store), request)
}

// Find mocks base method
func (m *MockNewsServiceInterface) Find(id uint) (models.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(models.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockNewsServiceInterfaceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockNewsServiceInterface)(nil).Find), id)
}

// MockElasticSearchServiceInterface is a mock of ElasticSearchServiceInterface interface
type MockElasticSearchServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockElasticSearchServiceInterfaceMockRecorder
}

// MockElasticSearchServiceInterfaceMockRecorder is the mock recorder for MockElasticSearchServiceInterface
type MockElasticSearchServiceInterfaceMockRecorder struct {
	mock *MockElasticSearchServiceInterface
}

// NewMockElasticSearchServiceInterface creates a new mock instance
func NewMockElasticSearchServiceInterface(ctrl *gomock.Controller) *MockElasticSearchServiceInterface {
	mock := &MockElasticSearchServiceInterface{ctrl: ctrl}
	mock.recorder = &MockElasticSearchServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElasticSearchServiceInterface) EXPECT() *MockElasticSearchServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckIndexExist mocks base method
func (m *MockElasticSearchServiceInterface) CheckIndexExist(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIndexExist", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIndexExist indicates an expected call of CheckIndexExist
func (mr *MockElasticSearchServiceInterfaceMockRecorder) CheckIndexExist(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIndexExist", reflect.TypeOf((*MockElasticSearchServiceInterface)(nil).CheckIndexExist), name)
}

// CreateIndex mocks base method
func (m *MockElasticSearchServiceInterface) CreateIndex(name string, maps map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", name, maps)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockElasticSearchServiceInterfaceMockRecorder) CreateIndex(name, maps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockElasticSearchServiceInterface)(nil).CreateIndex), name, maps)
}

// Store mocks base method
func (m *MockElasticSearchServiceInterface) Store(index, ID string, doc map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", index, ID, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockElasticSearchServiceInterfaceMockRecorder) Store(index, ID, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockElasticSearchServiceInterface)(nil).Store), index, ID, doc)
}

// Find mocks base method
func (m *MockElasticSearchServiceInterface) Find(index string, size, from int, filter map[string]interface{}) ([]models.ElasticSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", index, size, from, filter)
	ret0, _ := ret[0].([]models.ElasticSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockElasticSearchServiceInterfaceMockRecorder) Find(index, size, from, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockElasticSearchServiceInterface)(nil).Find), index, size, from, filter)
}

// Clear mocks base method
func (m *MockElasticSearchServiceInterface) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockElasticSearchServiceInterfaceMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockElasticSearchServiceInterface)(nil).Clear))
}

// MockQueueServiceInterface is a mock of QueueServiceInterface interface
type MockQueueServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceInterfaceMockRecorder
}

// MockQueueServiceInterfaceMockRecorder is the mock recorder for MockQueueServiceInterface
type MockQueueServiceInterfaceMockRecorder struct {
	mock *MockQueueServiceInterface
}

// NewMockQueueServiceInterface creates a new mock instance
func NewMockQueueServiceInterface(ctrl *gomock.Controller) *MockQueueServiceInterface {
	mock := &MockQueueServiceInterface{ctrl: ctrl}
	mock.recorder = &MockQueueServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueueServiceInterface) EXPECT() *MockQueueServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method
func (m *MockQueueServiceInterface) CreateChannel() (*amqp.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel")
	ret0, _ := ret[0].(*amqp.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockQueueServiceInterfaceMockRecorder) CreateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockQueueServiceInterface)(nil).CreateChannel))
}

// CreateQueue mocks base method
func (m *MockQueueServiceInterface) CreateQueue(channel *amqp.Channel) (amqp.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", channel)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueue indicates an expected call of CreateQueue
func (mr *MockQueueServiceInterfaceMockRecorder) CreateQueue(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockQueueServiceInterface)(nil).CreateQueue), channel)
}

// Publish mocks base method
func (m *MockQueueServiceInterface) Publish(request interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockQueueServiceInterfaceMockRecorder) Publish(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQueueServiceInterface)(nil).Publish), request)
}

// Subcribe mocks base method
func (m *MockQueueServiceInterface) Subcribe() (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subcribe")
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subcribe indicates an expected call of Subcribe
func (mr *MockQueueServiceInterfaceMockRecorder) Subcribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subcribe", reflect.TypeOf((*MockQueueServiceInterface)(nil).Subcribe))
}
